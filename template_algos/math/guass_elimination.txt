def gaussian_elimination_mod_m(A, b, m):
    """
    Solves Ax = b mod m using Gaussian elimination.

    Args:
        A: The coefficient matrix (list of lists).
        b: The right-hand side vector (list).
        m: The modulus.

    Returns:
        The solution vector x (list) or None if no solution exists.
    """
    n = len(A)
    Ab = [row[:] + [b[i]] for i, row in enumerate(A)] # Augment A with b

    # Forward elimination
    for i in range(n):
        # Find pivot
        pivot_row = i
        for j in range(i + 1, n):
            if abs(Ab[j][i]) > abs(Ab[pivot_row][i]):
                pivot_row = j

        # Swap rows
        Ab[i], Ab[pivot_row] = Ab[pivot_row], Ab[i]

        # Eliminate below pivot
        for j in range(i + 1, n):
            factor = (Ab[j][i] * pow(Ab[i][i], -1, m)) % m # Modular inverse
            for k in range(i, n + 1):
                Ab[j][k] = (Ab[j][k] - factor * Ab[i][k]) % m

    # Back substitution
    x = [0] * n
    for i in range(n - 1, -1, -1):
        x[i] = Ab[i][n]
        for j in range(i + 1, n):
            x[i] = (x[i] - Ab[i][j] * x[j]) % m
        x[i] = (x[i] * pow(Ab[i][i], -1, m)) % m # Modular inverse

    return x
